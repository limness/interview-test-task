import asyncio

from datetime import datetime
from aiogram import types
from aiogram.types import ParseMode

from dispatcher import dp, bot

from binance_functions import get_all_tokens
from binance_functions import get_daily_candles
from binance_functions import get_ticker
from binance_functions import generate_graphic

from settings import Settings

##################

""" Commands

    /help /start - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    /tokens_list - –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –±–∏–Ω–∞–Ω—Å–µ
    /form_graphic - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
    /get_top - –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º –ø–∞—Ä–∞–º

"""
@dp.message_handler(commands = ["start", "help"], commands_prefix = "!/")
async def cmd_start(message: types.Message):
    answer = "–ü—Ä–∏–≤–µ—Ç, –≤–∏–¥–∏–º–æ —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π. "
    answer += "–î–∞–≤–∞–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—é—Å—å, –Ø ‚Äî <b>–ø–∞—Ä—Å–µ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É, "
    answer += "—Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ üî∂ <b>Binance</b> —Å —Ü–µ–ª—å—é —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n"
    answer += "<b>–î–∞–≤–∞–π –ø–æ–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é:</b>\n\n"
    answer += "<i>–Ø –º–æ–≥—É</i> –∏–∑—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ –ø–∏–∫–µ —Ä–æ—Å—Ç–∞. "
    answer += "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –ø–æ\n üëÅ‚Äçüó® –≤–µ–±-—Å–æ–∫–µ—Ç—É, –ø–æ—ç—Ç–æ–º—É —Ç—ã –Ω–∞—á–Ω–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. "
    answer += "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /get_top\n\n"
    answer += "<i>–Ø –º–æ–≥—É</i> —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–¥—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤ <b>XLS/XLSX</b> —Ñ–æ—Ä–º–∞—Ç–µ. "
    answer += "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /form_graphic [–∏–º—è —Ç–æ–∫–µ–Ω–∞]\n\n"
    answer += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tokens_list"

    await bot.send_message(
              chat_id = message.from_user.id,
              text = answer,
              parse_mode = ParseMode.HTML,
          )

@dp.message_handler(commands = ["tokens_list"], commands_prefix = "!/")
async def cmd_tokens_list(message: types.Message):
    answer = "<b>üå™ –§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫...</b>"
    await bot.send_message(
              chat_id = message.from_user.id,
              text = answer,
              parse_mode = ParseMode.HTML,
          )

    answer = "<b>üìÉ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:</b>\n\n"
    answer += await get_all_tokens()

    await bot.send_message(
              chat_id = message.from_user.id,
              text = answer,
              parse_mode = ParseMode.HTML,
          )

@dp.message_handler(commands = ["get_top"], commands_prefix = "!/")
async def cmd_get_top(message: types.Message):
    if not Settings.get_top_alert:
        answer = "<b>üî∏ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç—ã –Ω–∞—á–Ω–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> "
        answer += "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥—É /get_top –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—É—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    else:
        answer = "<b>üî∫ –¢—ã –æ—Ç–∫–ª—é—á–∏–ª –ø—É—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ.</b> "
        answer += "–û–¥–Ω–∞–∫–æ —Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–¥–µ—Ç—Å—è —Å–∞–º–æ–º—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã"

    Settings.user_id = message.from_user.id
    Settings.get_top_alert = not Settings.get_top_alert

    await bot.send_message(
              chat_id = message.from_user.id,
              text = answer,
              parse_mode = ParseMode.HTML,
          )

@dp.message_handler(commands = ["form_graphic"], commands_prefix = "!/")
async def cmd_form_graphic(message: types.Message):
    # Args list
    arguments = message.get_args().split(" ")

    if len(arguments) != 1 or arguments[0].strip() == '':
        answer = "–ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        return await bot.send_message(
                  chat_id = message.from_user.id,
                  text = answer,
                  parse_mode = ParseMode.HTML,
              )

    answer = "<b>üå™ –§–æ—Ä–º–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–∫–µ–Ω–∞...</b>"
    await bot.send_message(
              chat_id = message.from_user.id,
              text = answer,
              parse_mode = ParseMode.HTML,
          )

    # Generate general information and output it to the user
    ticker = await get_ticker(arguments[0])
    answer = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ <b>{arguments[0]}</b> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏:\n\n"
    answer += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{round(float(ticker['bidPrice']), 2)}</b> üìå\n"
    answer += f"–î–µ–ª—å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: <b>{round(float(ticker['priceChangePercent']), 2)}%</b>\n"
    answer += f"–û–±—â–∏–π –æ–±—ä–µ–º: <b>{round(float(ticker['volume']), 2)} BTC</b>\n\n"
    answer += "üìä –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é <b>–ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã</b>\n"
    answer += "–∑–∞ —Å—É—Ç–∫–∏ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ —Ñ–∞–π–ª–∏–∫–µ –Ω–∏–∂–µ:"

    await bot.send_message(
              chat_id = message.from_user.id,
              text = answer,
              parse_mode = ParseMode.HTML,
          )

    if await generate_graphic(arguments[0]):
        await bot.send_document(
                  message.from_user.id,
                  open("charts.xlsx", 'rb')
              )
